@startuml overview

actor User

box "client"
participant Client order 3
participant ClientContext order 2
participant ClientChangePlant order 1
participant ClientSyncableObject order 0
end box

box "server"
participant Server order 4
participant ServerContext order 5
participant ServerChangePlant order 6
participant ServerSyncableObject order 7
end box

== initialize ==

Client -> Server: connect
Server -> ServerContext: get entrance syncables
ServerContext -> ServerContext: resolve requisite associations
create ServerSyncableObject
ServerContext -> ServerSyncableObject: create corresponding resources
ServerContext -> ServerSyncableObject: validate read access right
Server <-- ServerContext: context syncables
Client <-- Server: context syncables
Client -> ClientContext: add syncables to context
create ClientSyncableObject
ClientContext -> ClientSyncableObject: create corresponding resource
Client -> Server: view query
Server -> ServerContext: get queried syncables
ServerContext -> ServerContext: resolve requisite associations
ServerContext -> ServerSyncableObject: create corresponding resources
ServerContext -> ServerSyncableObject: validate read access right
Server <-- ServerContext: queried syncables
Server --> Client: queried syncables
Client -> ClientContext: add syncables to context
ClientContext -> ClientSyncableObject: create corresponding resource

== initiate change ==

User -> ClientSyncableObject: invoke method with side effects
ClientSyncableObject -> Client: update with change
Client -> ClientChangePlant: get consequences
Client <-- ClientChangePlant: consequences
Client -> ClientSyncableObject: validate write/associate access right
Client -> ClientContext: apply consequences

Client -> Server: change

Server -> ServerContext: lock and get related/associated resources
ServerContext -> ServerContext: resolve requisite associations
ServerContext -> ServerSyncableObject: create corresponding resources
ServerContext -> ServerSyncableObject: validate read access right
Server -> ServerChangePlant: get consequences
Server <-- ServerChangePlant: consequences
Server -> ServerContext: apply consequences
ServerContext -> ServerSyncableObject: validate write/associate access right
Server -> Server: broadcast consequences with syncables

== apply broadcast consequences ==

rnote over Server: broadcast consequences\nwith up-to-date syncables

Server -> ServerContext: get resources by broadcast syncables
ServerContext -> ServerContext: validate requisite associations
ServerContext -> ServerSyncableObject: create corresponding resources
ServerContext -> ServerSyncableObject: validate read access right
Server <-- ServerContext: filtered/transformed consequences
Server -> Client: related consequences
Client -> ClientContext: apply consequences

@enduml
